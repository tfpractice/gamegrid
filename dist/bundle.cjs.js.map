{"version":3,"file":"bundle.cjs.js","sources":["../src/node.js","../src/grid.js","../src/connections.js","../src/traversals.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const node = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => (rowDiff(n0)(n1)) / (colDiff(n0)(n1));\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\n\nexport default node;\n","import { fromElements, nodes, } from 'graph-curry';\nimport node, { column as getCol, row as getRow, isEquivalent, sameCol,\nsameNVector, samePVector, sameRow, } from './node';\n\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nodes = [];\n\n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nodes.unshift(node(c, r));\n    }\n  }\n\n  return nodes;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const initNodes = (c = 0, r = 0) => fromElements(...genNodes(c, r));\nexport const fromGrid = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\nexport default initNodes;\n","import { addEdges, fromElements, nodes, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\n\nexport const adjNodes = grid => src => nodes(grid).filter(isNeighbor(src));\n\nexport const rowAdj = grid => src => adjNodes(grid)(src).filter(sameRow(src));\nexport const colAdj = grid => src => adjNodes(grid)(src).filter(sameCol(src));\nexport const posAdj = grid => src => adjNodes(grid)(src).filter(samePVector(src));\nexport const negAdj = grid => src => adjNodes(grid)(src).filter(sameNVector(src));\nexport const allAdj = grid => src => adjNodes(grid)(src).filter(isNeighbor(src));\n\nexport const joinAdjBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...adjNodes(grid)(src));\n\nexport const joinColsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...colAdj(grid)(src));\n\nexport const joinRowsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...rowAdj(grid)(src));\n\nexport const joinPVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...posAdj(grid)(src));\n\nexport const joinNVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...negAdj(grid)(src));\n\nexport const joinAdj = grid => nodes(grid).reduce(joinAdjBin, grid);\nexport const joinCols = grid => nodes(grid).reduce(joinColsBin, grid);\nexport const joinRows = grid => nodes(grid).reduce(joinRowsBin, grid);\nexport const joinPVectors = grid => nodes(grid).reduce(joinPVectorsBin, grid);\nexport const joinNVectors = grid => nodes(grid).reduce(joinNVectorsBin, grid);\n","import { componentSet, fromElements, nodes, } from 'graph-curry';\nimport { joinAdj, joinCols, joinNVectors, joinPVectors, joinRows, } from './connections';\n\nexport const omniGraph = grid => joinAdj(fromElements(...nodes(grid)));\nexport const colGraph = grid => joinCols(fromElements(...nodes(grid)));\nexport const rowGraph = grid => joinRows(fromElements(...nodes(grid)));\nexport const posGraph = grid => joinPVectors(fromElements(...nodes(grid)));\nexport const negGraph = grid => joinNVectors(fromElements(...nodes(grid)));\n\nexport const colComponents = grid => componentSet(colGraph(grid));\nexport const rowComponents = grid => componentSet(rowGraph(grid));\nexport const posComponents = grid => componentSet(posGraph(grid));\nexport const negComponents = grid => componentSet(negGraph(grid));\n"],"names":["atan","Math","abs","PI","column","row","nodeString","node","toString","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","genNodes","cols","rows","nodes","c","r","unshift","cIDs","Set","grid","map","getCol","rIDs","getRow","initNodes","fromElements","fromGrid","nodesByColumn","filter","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find","adjNodes","rowAdj","colAdj","posAdj","negAdj","allAdj","joinAdjBin","Map","addEdges","joinColsBin","joinRowsBin","joinPVectorsBin","joinNVectorsBin","joinAdj","reduce","joinCols","joinRows","joinPVectors","joinNVectors","omniGraph","colGraph","rowGraph","posGraph","negGraph","colComponents","componentSet","rowComponents","posComponents","negComponents"],"mappings":"0GAAQA,KAAkBC,KAAlBD,KAAME,IAAYD,KAAZC,IAAKC,GAAOF,KAAPE,GAENC,OAAS,iBAAGA,KAAAA,aAAaA,IACzBC,IAAM,iBAAGA,KAAAA,UAAUA,IACnBC,WAAa,eAAGF,KAAAA,OAAQC,IAAAA,qBAAqBD,MAAUC,QACvDE,KAAO,cAACH,0DAAS,KAAMC,yDAAM,YACtCD,SAAQC,MAAKG,SAAU,iBAAMF,aAAaF,SAAQC,WAEzCI,QAAU,eAAWC,KAARN,aAAiB,gBAAWO,KAARP,aAAkBM,GAAKC,IACxDC,QAAU,eAAQC,KAALR,UAAc,gBAAQS,KAALT,UAAeQ,GAAKC,IAClDC,QAAU,kBAAM,mBAAOH,SAAQI,GAAIC,GAAQR,QAAQO,GAAIC,KACvDC,aAAe,kBAAM,oBAAQlB,KAAKe,QAAQC,GAAIC,IAAOd,GAAMA,IAAMA,KAEjEgB,QAAU,kBAAM,mBAA+B,KAAzBjB,IAAIO,QAAQO,GAAIC,MACtCG,QAAU,kBAAM,mBAA+B,KAAzBlB,IAAIU,QAAQI,GAAIC,MACtCI,YAAc,kBAAM,mBAAMH,cAAaF,GAAIC,KAAa,IAALd,KACnDmB,YAAc,kBAAM,mBAAMJ,cAAaF,GAAIC,KAAa,IAALd,KAEnDoB,KAAO,kBAAM,mBAAMrB,KAAIO,QAAQO,GAAIC,IAAO,IAC1CO,KAAO,kBAAM,mBAAMtB,KAAIU,QAAQI,GAAIC,IAAO,IAE1CQ,aAAe,kBAAM,mBAAMN,SAAQT,GAAIC,IAAOS,QAAQV,GAAIC,KAC1De,YAAc,kBAAO,oBAAQD,aAAaE,GAAKC,KAE/CC,WAAa,kBAAM,mBAC/BH,aAAYV,GAAIC,IAAOM,KAAKP,GAAIC,IAAOO,KAAKR,GAAIC,+dCrBpCa,SAAW,eAGjB,GAHkBC,0DAAO,EAAGC,yDAAO,EAClCC,KAEGC,EAAIH,EAAO,EAAGG,GAAK,EAAGA,QACxB,GAAIC,GAAIH,EAAO,EAAGG,GAAK,EAAGA,MACvBC,QAAQ7B,KAAK2B,EAAGC,UAInBF,IAGII,KAAO,kBAAQ,IAAIC,KAAIL,iBAAMM,GAAMC,IAAIC,UACvCC,KAAO,kBAAQ,IAAIJ,KAAIL,iBAAMM,GAAMC,IAAIG,OAEvCC,UAAY,cAACV,0DAAI,EAAGC,yDAAI,QAAMU,wDAAgBf,SAASI,EAAGC,MAC1DW,SAAW,kBAAQD,wDAAgBZ,iBAAMM,MAEzCQ,cAAgB,kBAAQ,eAAC3C,0DAAS,QAC7C6B,kBAAMM,GAAMS,OAAO7B,SAAUf,cAElB6C,WAAa,kBAAQ,eAAC5C,0DAAM,QACvC4B,kBAAMM,GAAMS,OAAO5B,SAAUf,WAElB6C,eAAiB,kBAAQ,eAAC9C,0DAAS,EAAGC,yDAAM,QACvD4B,kBAAMM,GAAMS,OAAO3B,aAAcjB,SAAQC,WAE9B8C,eAAiB,kBAAQ,eAAC/C,0DAAS,EAAGC,yDAAM,QACvD4B,kBAAMM,GAAMS,OAAO1B,aAAclB,SAAQC,WAE9B+C,eAAiB,kBAAQ,eAAChD,0DAAS,EAAGC,yDAAM,QACvD4B,kBAAMM,GAAMc,KAAK5B,cAAerB,SAAQC,WChC7BiD,SAAW,kBAAQ,mBAAOrB,kBAAMM,GAAMS,OAAOnB,WAAWF,MAExD4B,OAAS,kBAAQ,mBAAOD,UAASf,GAAMZ,GAAKqB,OAAO5B,QAAQO,MAC3D6B,OAAS,kBAAQ,mBAAOF,UAASf,GAAMZ,GAAKqB,OAAO7B,QAAQQ,MAC3D8B,OAAS,kBAAQ,mBAAOH,UAASf,GAAMZ,GAAKqB,OAAO3B,YAAYM,MAC/D+B,OAAS,kBAAQ,mBAAOJ,UAASf,GAAMZ,GAAKqB,OAAO1B,YAAYK,MAC/DgC,OAAS,kBAAQ,mBAAOL,UAASf,GAAMZ,GAAKqB,OAAOnB,WAAWF,MAE9DiC,WAAa,cAACrB,0DAAO,GAAIsB,KAAKlC,qBACzCmC,qBAASvB,GAAMZ,EAAK,kCAAM2B,SAASf,GAAMZ,MAE9BoC,YAAc,cAACxB,0DAAO,GAAIsB,KAAKlC,qBAC1CmC,qBAASvB,GAAMZ,EAAK,kCAAM6B,OAAOjB,GAAMZ,MAE5BqC,YAAc,cAACzB,0DAAO,GAAIsB,KAAKlC,qBAC1CmC,qBAASvB,GAAMZ,EAAK,kCAAM4B,OAAOhB,GAAMZ,MAE5BsC,gBAAkB,cAAC1B,0DAAO,GAAIsB,KAAKlC,qBAC9CmC,qBAASvB,GAAMZ,EAAK,kCAAM8B,OAAOlB,GAAMZ,MAE5BuC,gBAAkB,cAAC3B,0DAAO,GAAIsB,KAAKlC,qBAC9CmC,qBAASvB,GAAMZ,EAAK,kCAAM+B,OAAOnB,GAAMZ,MAE5BwC,QAAU,kBAAQlC,kBAAMM,GAAM6B,OAAOR,WAAYrB,IACjD8B,SAAW,kBAAQpC,kBAAMM,GAAM6B,OAAOL,YAAaxB,IACnD+B,SAAW,kBAAQrC,kBAAMM,GAAM6B,OAAOJ,YAAazB,IACnDgC,aAAe,kBAAQtC,kBAAMM,GAAM6B,OAAOH,gBAAiB1B,IAC3DiC,aAAe,kBAAQvC,kBAAMM,GAAM6B,OAAOF,gBAAiB3B,IC3B3DkC,UAAY,kBAAQN,SAAQtB,uDAAgBZ,iBAAMM,OAClDmC,SAAW,kBAAQL,UAASxB,uDAAgBZ,iBAAMM,OAClDoC,SAAW,kBAAQL,UAASzB,uDAAgBZ,iBAAMM,OAClDqC,SAAW,kBAAQL,cAAa1B,uDAAgBZ,iBAAMM,OACtDsC,SAAW,kBAAQL,cAAa3B,uDAAgBZ,iBAAMM,OAEtDuC,cAAgB,kBAAQC,yBAAaL,SAASnC,KAC9CyC,cAAgB,kBAAQD,yBAAaJ,SAASpC,KAC9C0C,cAAgB,kBAAQF,yBAAaH,SAASrC,KAC9C2C,cAAgB,kBAAQH,yBAAaF,SAAStC"}