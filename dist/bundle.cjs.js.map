{"version":3,"file":"bundle.cjs.js","sources":["../src/node.js","../src/compare.js","../src/filter.js","../src/join.js","../src/grid.js","../src/components.js"],"sourcesContent":["const init = { column: null, row: null, id: '' };\n\n// **column** `::  Node ->  Number`\n// returns a node's column property\nexport const column = ({ column } = init) => column;\n\n// **row** `::  Node ->  Number`\n// returns a node's row property\nexport const row = ({ row } = init) => row;\n\n// **id** `::  Node ->  String`\n// returns a node's row property\nexport const id = ({ id } = init) => id;\n\n// **show** `::  Node ->  String`\n// returns a string representation of a node\nexport const show = ({ column, row } = init) => `<c${column}_r${row}>`;\n\n// **node** `::  (Number, Number) -> Node`\n// returns an object with column and row properties\nexport const node = (column = null, row = null) =>\n ({ column, row, id: show({ column, row }), });\n\n // **copy** `::  Node -> Node`\n // returns a copy of a node\nexport const copy = n => node(column(n), row(n));\n\n// **setCol** `::  Node -> Node`\n// returns a copy of a node with a modified row\nexport const setCol = c => n => node(c, row(n));\n\n// **setRow** `::  Node -> Node`\n// returns a copy of a node with a modified row\nexport const setRow = r => n => node(column(n), r);\n","import { column, row, } from './node';\nconst { atan, abs, PI } = Math;\n\n// **colDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes column properties\nexport const colDiff = n0 => n1 => column(n0) - column(n1);\n\n// **rowDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes row properties\nexport const rowDiff = n0 => n1 => row(n0) - row(n1);\n\n// **tangent** `::  Node-> Node -> Number`\n// returns the column difference to row difference ratio of two nodes\nexport const tangent = n0 => n1 => rowDiff(n0)(n1) / colDiff(n0)(n1);\n\n// **angleBetween** `::  Node -> Node -> Number`\n// returns a the angle between two nodes in radians\nexport const angleBetween = a => b => ((atan(tangent(a)(b)) % PI) + PI) % PI;\n\n// **sameCol** `:: Node -> Node -> Boolean`\n// checks for equality between two nodes column properties\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\n\n// **sameRow** `::  Node -> Node -> Boolean`\n// checks for equality between two nodes row properties\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\n\n// **samePVector** `::  Node -> Node -> Boolean``\n// checks if two nodes lie on the same positive diagonal\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\n\n// **sameNVector** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same negative diagonal\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\n// **samePos** `::  Node -> Node -> Boolean`\n// checks if two nodes share position\nexport const samePos = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\n\n// **diffPos** `::  Node -> Node -> Boolean`\n// checks if two nodes don't share position\nexport const diffPos = src => alt => !samePos(src)(alt);\n\n// **cAdj** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same column\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\n\n// **rAdj** `:: Node -> Node -> Boolean\n// checks if two nodes lie on the same row\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\n// **isNeighbor** `::  Map<edge> ->  node  -> Map<edge>`\n// checks if two different nodes are neighbors\nexport const isNeighbor = a => b => diffPos(a)(b) && cAdj(a)(b) && rAdj(a)(b);\n","import { asSet, filter, map, spread, } from 'fenugreek-collections';\nimport { column, row, } from './node';\nimport { isNeighbor, sameCol, sameNVector, samePos, samePVector, sameRow,\n} from './compare';\n\n// **byCol** `::  [Node] ->  Number  -> [Node]`\n// returns an array of nodes  with the specified column id\nexport const byCol = nodes => (column = 0) => filter(nodes)(sameCol({ column }));\n\n// **byRow** `::  [Node] ->  Number  -> [Node]`\n// returns an array of nodes  with the specified row id\nexport const byRow = nodes => (row = 0) => filter(nodes)(sameRow({ row }));\n\n// **byPVec** `:: [Node] ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified postive diagonal\nexport const byPVec = nodes => (column = 0, row = 0) =>\n    filter(nodes)(samePVector({ column, row }));\n\n// **byNVec** `:: [Node] ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified negative diagonal\nexport const byNVec = nodes => (column = 0, row = 0) =>\n     filter(nodes)(sameNVector({ column, row }));\n\n// **byPosition** `::  [Node] ->  node  -> Node`\n// returns a node at the specified position\nexport const byPosition = nodes => (column = 0, row = 0) =>\n  spread(nodes).find(samePos({ column, row }));\n  \n// **cIDs** `::  [Node] -> Set<Number>`\n// returns a Set of a grid's columns\nexport const cIDs = nodes => spread(asSet(map(nodes)(column)));\n\n// **rIDs** `::  [Node] -> Set<Number>`\n// returns a Set of a grid's rows\nexport const rIDs = nodes => spread(asSet(map(nodes)(row)));\n\n// **byAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all nodes\nexport const byAdj = nodes => src => filter(nodes)(isNeighbor(src));\n\n// **rowAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all rows\nexport const rowAdj = nodes => src => filter(byAdj(nodes)(src))(sameRow(src));\n\n// **colAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all columns\nexport const colAdj = nodes => src => filter(byAdj(nodes)(src))(sameCol(src));\n\n// **posAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all positive diagonals\nexport const posAdj = nodes => src => filter(byAdj(nodes)(src))(samePVector(src));\n\n// **negAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all negative diagonal\nexport const negAdj = nodes => src => filter(byAdj(nodes)(src))(sameNVector(src));\n","import { Graph, } from 'graph-curry';\nimport { byAdj, colAdj, negAdj, posAdj, rowAdj, } from './filter';\n\nconst { addEdges, nodes, } = Graph;\n\n// **joinAdj** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its neighbors\nexport const joinAdj = (g, n) => addEdges(g)(n, 0)(...byAdj(nodes(g))(n));\n\n// **joinCols** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its column neighbors\nexport const joinCols = (g, n) => addEdges(g)(n, 0)(...colAdj(nodes(g))(n));\n\n// **joinRows** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its row neighbors\nexport const joinRows = (g, n) => addEdges(g)(n, 0)(...rowAdj(nodes(g))(n));\n\n// **joinPVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its positive neighbors\nexport const joinPVectors = (g, n) => addEdges(g)(n, 0)(...posAdj(nodes(g))(n));\n\n// **joinNVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its negative neighbors\nexport const joinNVectors = (g, n) => addEdges(g)(n, 0)(...negAdj(nodes(g))(n));\n","import { Graph, } from 'graph-curry';\nimport { byCol, byNVec, byPosition, byPVec, byRow, } from './filter';\nimport { joinAdj, joinCols, joinNVectors, joinPVectors, joinRows, } from './join';\nimport { node, } from './node';\n\nconst { graph, nodes, } = Graph;\n\n// **genNodes** `::  (Number, Number) -> [Node]`\n// returns an array of nodes the specified number of columns and rows\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nArr = [];\n  \n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nArr.unshift(node(c, r));\n    }\n  }\n  \n  return nArr;\n};\n\n// **grid** `::  (Number, Number) -> Map<edge>`\n// returns a Map of edges with the specified number of columns and rows\nexport const grid = (c = 0, r = 0) => graph(...genNodes(c, r));\n\n// **copy** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a copy of a grid\nexport const copy = grid => graph(...nodes(grid));\n\n// **colNodes** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified column id\nexport const colNodes = grid => (c = 0) => byCol(nodes(grid))(c);\n\n// **rowNodes** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified row id\nexport const rowNodes = grid => (r = 0) => byRow(nodes(grid))(r);\n\n// **posNodestor** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified postive diagonal\nexport const posNodes = grid => (c = 0, r = 0) => byPVec(nodes(grid))(c, r);\n\n// **negNodestor** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified negative diagonal\nexport const negNodes = grid => (c = 0, r = 0) => byNVec(nodes(grid))(c, r);\n\n// **findNode** `::  Map<edge> ->  node  -> Node`\n// returns a node at the specified position\nexport const findNode = grid => (c = 0, r = 0) => byPosition(nodes(grid))(c, r);\n\n// **joinGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their neighbors\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\n\n// **colGrid** `::  Map<edge> -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their column eighbors\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\n\n// **rowGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their row neighbors\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\n\n// **posGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their positive neighbors\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\n\n// **negGrid** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their negative neighbors\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n","import { Components, } from 'graph-curry';\nimport { colGrid, negGrid, posGrid, rowGrid, } from './grid';\n\nconst { componentSet, } = Components;\n\n// **colComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all columnn connected components\nexport const colComps = grid => componentSet(colGrid(grid));\n\n// **rowComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all row connected components\nexport const rowComps = grid => componentSet(rowGrid(grid));\n\n// **posComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all positive connected components\nexport const posComps = grid => componentSet(posGrid(grid));\n\n// **negComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all negative connected components\nexport const negComps = grid => componentSet(negGrid(grid));\n\n// **omniComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all connected components\nexport const omniComps = grid => [ colComps, negComps, posComps, rowComps, ]\n  .map(f => f(grid)).reduce((set, next) => new Set(set).add(next), new Set);\n  \n// **splitComps** `::  Map<edge>  -> Set<edge>`\n// returns a map of all connected components by direction\nexport const splitComps = g => new Map().set('row', rowComps(g))\n  .set('col', colComps(g)).set('pos', posComps(g)).set('neg', negComps(g));\n"],"names":["init","column","row","id","show","node","copy","n","setCol","c","setRow","r","atan","Math","abs","PI","colDiff","n0","n1","rowDiff","tangent","angleBetween","a","b","sameCol","sameRow","samePVector","sameNVector","samePos","c0","c1","diffPos","src","alt","cAdj","rAdj","isNeighbor","byCol","filter","nodes","byRow","byPVec","byNVec","byPosition","spread","find","cIDs","asSet","map","rIDs","byAdj","rowAdj","colAdj","posAdj","negAdj","addEdges","Graph","joinAdj","g","joinCols","joinRows","joinPVectors","joinNVectors","graph","genNodes","cols","rows","nArr","unshift","grid","colNodes","rowNodes","posNodes","negNodes","findNode","joinGrid","reduce","colGrid","rowGrid","posGrid","negGrid","componentSet","Components","colComps","rowComps","posComps","negComps","omniComps","f","set","next","Set","add","splitComps","Map"],"mappings":"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"}