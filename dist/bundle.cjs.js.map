{"version":3,"file":"bundle.cjs.js","sources":["../src/node.js","../src/adj.js","../src/join.js","../src/components.js","../src/grid.js","../src/Join.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const node = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\nexport const copy = n => node(column(n), row(n));\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => rowDiff(n0)(n1) / colDiff(n0)(n1);\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\n","import { Graph, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\nconst { nodes, } = Graph;\n\nexport const allAdj = g => src => nodes(g).filter(isNeighbor(src));\nexport const rowAdj = g => src => allAdj(g)(src).filter(sameRow(src));\nexport const colAdj = g => src => allAdj(g)(src).filter(sameCol(src));\nexport const posAdj = g => src => allAdj(g)(src).filter(samePVector(src));\nexport const negAdj = g => src => allAdj(g)(src).filter(sameNVector(src));\n","import { Graph, } from 'graph-curry';\nimport { allAdj, colAdj, negAdj, posAdj, rowAdj, } from './adj';\n\nconst { addEdges, nodes, } = Graph;\n\nexport const joinAdj = (g, src) => addEdges(g)(src, 0)(...allAdj(g)(src));\nexport const joinCols = (g, src) => addEdges(g)(src, 0)(...colAdj(g)(src));\nexport const joinRows = (g, src) => addEdges(g)(src, 0)(...rowAdj(g)(src));\nexport const joinPVectors = (g, src) => addEdges(g)(src, 0)(...posAdj(g)(src));\nexport const joinNVectors = (g, src) => addEdges(g)(src, 0)(...negAdj(g)(src));\n\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n","import { Components, } from 'graph-curry';\nimport { colGrid, negGrid, posGrid, rowGrid, } from './join';\nconst { componentSet, } = Components;\n\nexport const colComponents = grid => componentSet(colGrid(grid));\nexport const rowComponents = grid => componentSet(rowGrid(grid));\nexport const posComponents = grid => componentSet(posGrid(grid));\nexport const negComponents = grid => componentSet(negGrid(grid));\n","import { Graph, } from 'graph-curry';\nimport { column as getCol, row as getRow, isEquivalent, node, sameCol,\n  sameNVector, samePVector, sameRow, } from './node';\n\nconst { fromElements, nodes, } = Graph;\n\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nArr = [];\n  \n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nArr.unshift(node(c, r));\n    }\n  }\n  \n  return nArr;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const grid = (c = 0, r = 0) => fromElements(...genNodes(c, r));\nexport const copy = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n","import { Graph, } from 'graph-curry';\nimport { allAdj, colAdj, negAdj, posAdj, rowAdj, } from './adj';\n\nconst { addEdges, nodes, } = Graph;\n\nexport const joinAdj = (g, src) => addEdges(g)(src, 0)(...allAdj(g)(src));\nexport const joinCols = (g, src) => addEdges(g)(src, 0)(...colAdj(g)(src));\nexport const joinRows = (g, src) => addEdges(g)(src, 0)(...rowAdj(g)(src));\nexport const joinPVectors = (g, src) => addEdges(g)(src, 0)(...posAdj(g)(src));\nexport const joinNVectors = (g, src) => addEdges(g)(src, 0)(...negAdj(g)(src));\n\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n"],"names":["atan","Math","abs","PI","column","row","nodeString","node","toString","copy","n","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","nodes","Graph","allAdj","g","filter","rowAdj","colAdj","posAdj","negAdj","addEdges","joinCols","joinRows","joinPVectors","joinNVectors","colGrid","grid","reduce","rowGrid","posGrid","negGrid","componentSet","Components","colComponents","rowComponents","posComponents","negComponents","fromElements","genNodes","cols","rows","nArr","c","r","unshift","cIDs","Set","map","getCol","rIDs","getRow","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find","joinAdj","joinGrid"],"mappings":"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"}