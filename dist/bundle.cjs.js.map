{"version":3,"file":"bundle.cjs.js","sources":["../src/node.js","../src/connections.js","../src/grid.js","../index.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const spawn = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => (rowDiff(n0)(n1)) / (colDiff(n0)(n1));\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\nexport default spawn;\n","import { addEdges, fromElements, nodes, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\n\nexport const adjNodes = grid => src => nodes(grid).filter(isNeighbor(src));\n\nexport const rowAdj = grid => src => adjNodes(grid)(src).filter(sameRow(src));\nexport const colAdj = grid => src => adjNodes(grid)(src).filter(sameCol(src));\nexport const posAdj = grid => src => adjNodes(grid)(src).filter(samePVector(src));\nexport const negAdj = grid => src => adjNodes(grid)(src).filter(sameNVector(src));\nexport const allAdj = grid => src => adjNodes(grid)(src).filter(isNeighbor(src));\n\nexport const joinAdjBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...adjNodes(grid)(src));\n\nexport const joinColsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...colAdj(grid)(src));\n\nexport const joinRowsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...rowAdj(grid)(src));\n\nexport const joinPVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...posAdj(grid)(src));\n\nexport const joinNVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...negAdj(grid)(src));\n\nexport const joinAdj = grid => nodes(grid).reduce(joinAdjBin, grid);\nexport const joinCols = grid => nodes(grid).reduce(joinColsBin, grid);\nexport const joinRows = grid => nodes(grid).reduce(joinRowsBin, grid);\nexport const joinPVectors = grid => nodes(grid).reduce(joinPVectorsBin, grid);\nexport const joinNVectors = grid => nodes(grid).reduce(joinNVectorsBin, grid);\n","import { fromElements, nodes, removeNodes, } from 'graph-curry';\nimport node, { column as getCol, row as getRow, isEquivalent, isNeighbor, sameCol,\nsameNVector, samePlayer, samePVector, sameRow, }\nfrom './node';\n\nexport { nodes, neighbors, } from 'graph-curry';\nexport const nodeArray = (cols = 0, rows = 0) => {\n  const nodes = [];\n\n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nodes.unshift(node(c, r));\n    }\n  }\n\n  return nodes;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const initNodes = (c = 0, r = 0) => fromElements(...nodeArray(c, r));\nexport const fromGrid = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n\nexport default initNodes;\n","module.exports = require('./src');\n"],"names":["atan","Math","abs","PI","column","row","nodeString","spawn","toString","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","adjNodes","nodes","grid","filter","rowAdj","colAdj","posAdj","negAdj","allAdj","joinAdjBin","Map","addEdges","joinColsBin","joinRowsBin","joinPVectorsBin","joinNVectorsBin","joinAdj","reduce","joinCols","joinRows","joinPVectors","joinNVectors","nodeArray","cols","rows","c","r","unshift","node","cIDs","Set","map","getCol","rIDs","getRow","initNodes","fromElements","fromGrid","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find","require$$0"],"mappings":"8XAAQA,KAAkBC,KAAlBD,KAAME,IAAYD,KAAZC,IAAKC,GAAOF,KAAPE,GAENC,OAAS,iBAAGA,KAAAA,aAAaA,IACzBC,IAAM,iBAAGA,KAAAA,UAAUA,IACnBC,WAAa,eAAGF,KAAAA,OAAQC,IAAAA,qBAAqBD,MAAUC,QACvDE,MAAQ,cAACH,0DAAS,KAAMC,yDAAM,YACvCD,SAAQC,MAAKG,SAAU,iBAAMF,aAAaF,SAAQC,WAEzCI,QAAU,eAAWC,KAARN,aAAiB,gBAAWO,KAARP,aAAkBM,GAAKC,IACxDC,QAAU,eAAQC,KAALR,UAAc,gBAAQS,KAALT,UAAeQ,GAAKC,IAClDC,QAAU,kBAAM,mBAAOH,SAAQI,GAAIC,GAAQR,QAAQO,GAAIC,KACvDC,aAAe,kBAAM,oBAAQlB,KAAKe,QAAQC,GAAIC,IAAOd,GAAMA,IAAMA,KAEjEgB,QAAU,kBAAM,mBAA+B,KAAzBjB,IAAIO,QAAQO,GAAIC,MACtCG,QAAU,kBAAM,mBAA+B,KAAzBlB,IAAIU,QAAQI,GAAIC,MACtCI,YAAc,kBAAM,mBAAMH,cAAaF,GAAIC,KAAa,IAALd,KACnDmB,YAAc,kBAAM,mBAAMJ,cAAaF,GAAIC,KAAa,IAALd,KAEnDoB,KAAO,kBAAM,mBAAMrB,KAAIO,QAAQO,GAAIC,IAAO,IAC1CO,KAAO,kBAAM,mBAAMtB,KAAIU,QAAQI,GAAIC,IAAO,IAE1CQ,aAAe,kBAAM,mBAAMN,SAAQT,GAAIC,IAAOS,QAAQV,GAAIC,KAC1De,YAAc,kBAAO,oBAAQD,aAAaE,GAAKC,KAE/CC,WAAa,kBAAM,mBAC/BH,aAAYV,GAAIC,IAAOM,KAAKP,GAAIC,IAAOO,KAAKR,GAAIC,yVCtBpCa,SAAW,kBAAQ,mBAAOC,kBAAMC,GAAMC,OAAOJ,WAAWF,MAExDO,OAAS,kBAAQ,mBAAOJ,UAASE,GAAML,GAAKM,OAAOb,QAAQO,MAC3DQ,OAAS,kBAAQ,mBAAOL,UAASE,GAAML,GAAKM,OAAOd,QAAQQ,MAC3DS,OAAS,kBAAQ,mBAAON,UAASE,GAAML,GAAKM,OAAOZ,YAAYM,MAC/DU,OAAS,kBAAQ,mBAAOP,UAASE,GAAML,GAAKM,OAAOX,YAAYK,MAC/DW,OAAS,kBAAQ,mBAAOR,UAASE,GAAML,GAAKM,OAAOJ,WAAWF,MAE9DY,WAAa,cAACP,0DAAO,GAAIQ,KAAKb,qBACzCc,qBAAST,GAAML,EAAK,mCAAMG,SAASE,GAAML,MAE9Be,YAAc,cAACV,0DAAO,GAAIQ,KAAKb,qBAC1Cc,qBAAST,GAAML,EAAK,mCAAMQ,OAAOH,GAAML,MAE5BgB,YAAc,cAACX,0DAAO,GAAIQ,KAAKb,qBAC1Cc,qBAAST,GAAML,EAAK,mCAAMO,OAAOF,GAAML,MAE5BiB,gBAAkB,cAACZ,0DAAO,GAAIQ,KAAKb,qBAC9Cc,qBAAST,GAAML,EAAK,mCAAMS,OAAOJ,GAAML,MAE5BkB,gBAAkB,cAACb,0DAAO,GAAIQ,KAAKb,qBAC9Cc,qBAAST,GAAML,EAAK,mCAAMU,OAAOL,GAAML,MAE5BmB,QAAU,kBAAQf,kBAAMC,GAAMe,OAAOR,WAAYP,IACjDgB,SAAW,kBAAQjB,kBAAMC,GAAMe,OAAOL,YAAaV,IACnDiB,SAAW,kBAAQlB,kBAAMC,GAAMe,OAAOJ,YAAaX,IACnDkB,aAAe,kBAAQnB,kBAAMC,GAAMe,OAAOH,gBAAiBZ,IAC3DmB,aAAe,kBAAQpB,kBAAMC,GAAMe,OAAOF,gBAAiBb,uWCxB3DoB,UAAY,eAGlB,GAHmBC,0DAAO,EAAGC,yDAAO,EACnCvB,KAEGwB,EAAIF,EAAO,EAAGE,GAAK,EAAGA,QACxB,GAAIC,GAAIF,EAAO,EAAGE,GAAK,EAAGA,MACvBC,QAAQC,MAAKH,EAAGC,UAInBzB,IAGI4B,KAAO,kBAAQ,IAAIC,KAAI7B,iBAAMC,GAAM6B,IAAIC,UACvCC,KAAO,kBAAQ,IAAIH,KAAI7B,iBAAMC,GAAM6B,IAAIG,OAEvCC,UAAY,cAACV,0DAAI,EAAGC,yDAAI,QAAMU,2DAAgBd,UAAUG,EAAGC,MAC3DW,SAAW,kBAAQD,2DAAgBnC,iBAAMC,MAEzCoC,cAAgB,kBAAQ,eAAChE,0DAAS,QAC7C2B,kBAAMC,GAAMC,OAAOd,SAAUf,cAElBiE,WAAa,kBAAQ,eAAChE,0DAAM,QACvC0B,kBAAMC,GAAMC,OAAOb,SAAUf,WAElBiE,eAAiB,kBAAQ,eAAClE,0DAAS,EAAGC,yDAAM,QACvD0B,kBAAMC,GAAMC,OAAOZ,aAAcjB,SAAQC,WAE9BkE,eAAiB,kBAAQ,eAACnE,0DAAS,EAAGC,yDAAM,QACvD0B,kBAAMC,GAAMC,OAAOX,aAAclB,SAAQC,WAE9BmE,eAAiB,kBAAQ,eAACpE,0DAAS,EAAGC,yDAAM,QACvD0B,kBAAMC,GAAMyC,KAAKhD,cAAerB,SAAQC,6bCrCzBqE"}