{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/grid.js","../src/connections.js","../src/traversals.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const node = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => (rowDiff(n0)(n1)) / (colDiff(n0)(n1));\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\n\nexport default node;\n","import { fromElements, nodes, } from 'graph-curry';\nimport node, { column as getCol, row as getRow, isEquivalent, sameCol,\nsameNVector, samePVector, sameRow, } from './node';\n\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nodes = [];\n\n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nodes.unshift(node(c, r));\n    }\n  }\n\n  return nodes;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const initNodes = (c = 0, r = 0) => fromElements(...genNodes(c, r));\nexport const fromGrid = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\nexport default initNodes;\n","import { addEdges, nodes, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\n\nexport const adjNodes = grid => src => nodes(grid).filter(isNeighbor(src));\n\nexport const rowAdj = grid => src => adjNodes(grid)(src).filter(sameRow(src));\nexport const colAdj = grid => src => adjNodes(grid)(src).filter(sameCol(src));\nexport const posAdj = grid => src => adjNodes(grid)(src).filter(samePVector(src));\nexport const negAdj = grid => src => adjNodes(grid)(src).filter(sameNVector(src));\nexport const allAdj = grid => src => adjNodes(grid)(src).filter(isNeighbor(src));\n\nexport const joinAdjBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...adjNodes(grid)(src));\n\nexport const joinColsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...colAdj(grid)(src));\n\nexport const joinRowsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...rowAdj(grid)(src));\n\nexport const joinPVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...posAdj(grid)(src));\n\nexport const joinNVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...negAdj(grid)(src));\n\nexport const joinAdj = grid => nodes(grid).reduce(joinAdjBin, grid);\nexport const joinCols = grid => nodes(grid).reduce(joinColsBin, grid);\nexport const joinRows = grid => nodes(grid).reduce(joinRowsBin, grid);\nexport const joinPVectors = grid => nodes(grid).reduce(joinPVectorsBin, grid);\nexport const joinNVectors = grid => nodes(grid).reduce(joinNVectorsBin, grid);\n","import { componentSet, fromElements, nodes, } from 'graph-curry';\nimport { joinAdj, joinCols, joinNVectors, joinPVectors, joinRows, } from './connections';\n\nexport const omniGraph = grid => joinAdj(fromElements(...nodes(grid)));\nexport const colGraph = grid => joinCols(fromElements(...nodes(grid)));\nexport const rowGraph = grid => joinRows(fromElements(...nodes(grid)));\nexport const posGraph = grid => joinPVectors(fromElements(...nodes(grid)));\nexport const negGraph = grid => joinNVectors(fromElements(...nodes(grid)));\n\nexport const colComponents = grid => componentSet(colGraph(grid));\nexport const rowComponents = grid => componentSet(rowGraph(grid));\nexport const posComponents = grid => componentSet(posGraph(grid));\nexport const negComponents = grid => componentSet(negGraph(grid));\n"],"names":["atan","Math","abs","PI","column","row","nodeString","node","toString","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","genNodes","cols","rows","nodes","c","r","unshift","cIDs","Set","grid","map","getCol","rIDs","getRow","initNodes","fromElements","fromGrid","nodesByColumn","filter","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find","adjNodes","rowAdj","colAdj","posAdj","negAdj","allAdj","joinAdjBin","Map","addEdges","joinColsBin","joinRowsBin","joinPVectorsBin","joinNVectorsBin","joinAdj","reduce","joinCols","joinRows","joinPVectors","joinNVectors","omniGraph","colGraph","rowGraph","posGraph","negGraph","colComponents","componentSet","rowComponents","posComponents","negComponents"],"mappings":"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"}