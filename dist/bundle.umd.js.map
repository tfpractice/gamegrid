{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/adj.js","../src/join.js","../src/components.js","../src/grid.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const node = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\nexport const copy = n => node(column(n), row(n));\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => rowDiff(n0)(n1) / colDiff(n0)(n1);\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\n","import { Graph, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\nconst { nodes, } = Graph;\n\nexport const allAdj = g => src => nodes(g).filter(isNeighbor(src));\nexport const rowAdj = g => src => allAdj(g)(src).filter(sameRow(src));\nexport const colAdj = g => src => allAdj(g)(src).filter(sameCol(src));\nexport const posAdj = g => src => allAdj(g)(src).filter(samePVector(src));\nexport const negAdj = g => src => allAdj(g)(src).filter(sameNVector(src));\n","import { Graph, } from 'graph-curry';\nimport { allAdj, colAdj, negAdj, posAdj, rowAdj, } from './adj';\n\nconst { addEdges, nodes, } = Graph;\n\nexport const joinAdj = (g, src) => addEdges(g)(src, 0)(...allAdj(g)(src));\nexport const joinCols = (g, src) => addEdges(g)(src, 0)(...colAdj(g)(src));\nexport const joinRows = (g, src) => addEdges(g)(src, 0)(...rowAdj(g)(src));\nexport const joinPVectors = (g, src) => addEdges(g)(src, 0)(...posAdj(g)(src));\nexport const joinNVectors = (g, src) => addEdges(g)(src, 0)(...negAdj(g)(src));\n\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n","import { Components, } from 'graph-curry';\nimport { colGrid, negGrid, posGrid, rowGrid, } from './join';\nconst { componentSet, } = Components;\n\nexport const colComponents = grid => componentSet(colGrid(grid));\nexport const rowComponents = grid => componentSet(rowGrid(grid));\nexport const posComponents = grid => componentSet(posGrid(grid));\nexport const negComponents = grid => componentSet(negGrid(grid));\n","import { Graph, } from 'graph-curry';\nimport { column as getCol, row as getRow, isEquivalent, node, sameCol,\n  sameNVector, samePVector, sameRow, } from './node';\n\nconst { fromElements, nodes, } = Graph;\n\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nArr = [];\n  \n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nArr.unshift(node(c, r));\n    }\n  }\n  \n  return nArr;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const grid = (c = 0, r = 0) => fromElements(...genNodes(c, r));\nexport const copy = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n"],"names":["atan","Math","abs","PI","column","row","nodeString","node","toString","copy","n","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","nodes","Graph","allAdj","g","filter","rowAdj","colAdj","posAdj","negAdj","addEdges","joinAdj","joinCols","joinRows","joinPVectors","joinNVectors","joinGrid","grid","reduce","colGrid","rowGrid","posGrid","negGrid","componentSet","Components","colComponents","rowComponents","posComponents","negComponents","fromElements","genNodes","cols","rows","nArr","c","r","unshift","cIDs","Set","map","getCol","rIDs","getRow","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find"],"mappings":"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"}