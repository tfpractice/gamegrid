{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/connections.js","../src/grid.js","../index.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const spawn = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => (rowDiff(n0)(n1)) / (colDiff(n0)(n1));\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\nexport default spawn;\n","import { addEdges, fromElements, nodes, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\n\nexport const adjNodes = grid => src => nodes(grid).filter(isNeighbor(src));\n\nexport const rowAdj = grid => src => adjNodes(grid)(src).filter(sameRow(src));\nexport const colAdj = grid => src => adjNodes(grid)(src).filter(sameCol(src));\nexport const posAdj = grid => src => adjNodes(grid)(src).filter(samePVector(src));\nexport const negAdj = grid => src => adjNodes(grid)(src).filter(sameNVector(src));\nexport const allAdj = grid => src => adjNodes(grid)(src).filter(isNeighbor(src));\n\nexport const joinAdjBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...adjNodes(grid)(src));\n\nexport const joinColsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...colAdj(grid)(src));\n\nexport const joinRowsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...rowAdj(grid)(src));\n\nexport const joinPVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...posAdj(grid)(src));\n\nexport const joinNVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...negAdj(grid)(src));\n\nexport const joinAdj = grid => nodes(grid).reduce(joinAdjBin, grid);\nexport const joinCols = grid => nodes(grid).reduce(joinColsBin, grid);\nexport const joinRows = grid => nodes(grid).reduce(joinRowsBin, grid);\nexport const joinPVectors = grid => nodes(grid).reduce(joinPVectorsBin, grid);\nexport const joinNVectors = grid => nodes(grid).reduce(joinNVectorsBin, grid);\n","import { fromElements, nodes, removeNodes, } from 'graph-curry';\nimport node, { column as getCol, row as getRow, isEquivalent, isNeighbor, sameCol,\nsameNVector, samePlayer, samePVector, sameRow, }\nfrom './node';\n\nexport { nodes, neighbors, } from 'graph-curry';\nexport const nodeArray = (cols = 0, rows = 0) => {\n  const nodes = [];\n\n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nodes.unshift(node(c, r));\n    }\n  }\n\n  return nodes;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const initNodes = (c = 0, r = 0) => fromElements(...nodeArray(c, r));\nexport const fromGrid = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n\nexport default initNodes;\n","module.exports = require('./src');\n"],"names":["atan","Math","abs","PI","column","row","nodeString","spawn","toString","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","adjNodes","nodes","grid","filter","rowAdj","colAdj","posAdj","negAdj","allAdj","joinAdjBin","Map","addEdges","joinColsBin","joinRowsBin","joinPVectorsBin","joinNVectorsBin","joinAdj","reduce","joinCols","joinRows","joinPVectors","joinNVectors","nodeArray","cols","rows","c","r","unshift","node","cIDs","Set","map","getCol","rIDs","getRow","initNodes","fromElements","fromGrid","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find","require$$0"],"mappings":"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"}