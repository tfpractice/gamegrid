{"version":3,"file":"bundle.es6.js","sources":["../src/node.js","../src/compare.js","../src/filter.js","../src/join.js","../src/grid.js","../src/components.js"],"sourcesContent":["const init = { column: null, row: null, id: '' };\n\n// **column** `::  Node ->  Number`\n// returns a node's column property\nexport const column = ({ column } = init) => column;\n\n// **row** `::  Node ->  Number`\n// returns a node's row property\nexport const row = ({ row } = init) => row;\n\n// **id** `::  Node ->  String`\n// returns a node's row property\nexport const id = ({ id } = init) => id;\n\n// **show** `::  Node ->  String`\n// returns a string representation of a node\nexport const show = ({ column, row } = init) => `<c${column}_r${row}>`;\n\n// **node** `::  (Number, Number) -> Node`\n// returns an object with column and row properties\nexport const node = (column = null, row = null) =>\n ({ column, row, id: show({ column, row }), });\n\n // **copy** `::  Node -> Node`\n // returns a copy of a node\nexport const copy = n => node(column(n), row(n));\n\n// **setCol** `::  Node -> Node`\n// returns a copy of a node with a modified row\nexport const setCol = c => n => node(c, row(n));\n\n// **setRow** `::  Node -> Node`\n// returns a copy of a node with a modified row\nexport const setRow = r => n => node(column(n), r);\n","import { column, row, } from './node';\nconst { atan, abs, PI } = Math;\n\n// **colDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes column properties\nexport const colDiff = n0 => n1 => column(n0) - column(n1);\n\n// **rowDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes row properties\nexport const rowDiff = n0 => n1 => row(n0) - row(n1);\n\n// **tangent** `::  Node-> Node -> Number`\n// returns the column difference to row difference ratio of two nodes\nexport const tangent = n0 => n1 => rowDiff(n0)(n1) / colDiff(n0)(n1);\n\n// **angleBetween** `::  Node -> Node -> Number`\n// returns a the angle between two nodes in radians\nexport const angleBetween = a => b => ((atan(tangent(a)(b)) % PI) + PI) % PI;\n\n// **sameCol** `:: Node -> Node -> Boolean`\n// checks for equality between two nodes column properties\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\n\n// **sameRow** `::  Node -> Node -> Boolean`\n// checks for equality between two nodes row properties\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\n\n// **samePVector** `::  Node -> Node -> Boolean``\n// checks if two nodes lie on the same positive diagonal\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\n\n// **sameNVector** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same negative diagonal\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\n// **samePos** `::  Node -> Node -> Boolean`\n// checks if two nodes share position\nexport const samePos = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\n\n// **diffPos** `::  Node -> Node -> Boolean`\n// checks if two nodes don't share position\nexport const diffPos = src => alt => !samePos(src)(alt);\n\n// **cAdj** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same column\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\n\n// **rAdj** `:: Node -> Node -> Boolean\n// checks if two nodes lie on the same row\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\n// **isNeighbor** `::  Map<edge> ->  node  -> Map<edge>`\n// checks if two different nodes are neighbors\nexport const isNeighbor = a => b => diffPos(a)(b) && cAdj(a)(b) && rAdj(a)(b);\n","import { asSet, filter, map, spread, } from 'fenugreek-collections';\nimport { column, row, } from './node';\nimport { isNeighbor, sameCol, sameNVector, samePos, samePVector, sameRow,\n} from './compare';\n\n// **byCol** `::  [Node] ->  Number  -> [Node]`\n// returns an array of nodes  with the specified column id\nexport const byCol = nodes => (column = 0) => filter(nodes)(sameCol({ column }));\n\n// **byRow** `::  [Node] ->  Number  -> [Node]`\n// returns an array of nodes  with the specified row id\nexport const byRow = nodes => (row = 0) => filter(nodes)(sameRow({ row }));\n\n// **byPVec** `:: [Node] ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified postive diagonal\nexport const byPVec = nodes => (column = 0, row = 0) =>\n    filter(nodes)(samePVector({ column, row }));\n\n// **byNVec** `:: [Node] ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified negative diagonal\nexport const byNVec = nodes => (column = 0, row = 0) =>\n     filter(nodes)(sameNVector({ column, row }));\n\n// **byPosition** `::  [Node] ->  node  -> Node`\n// returns a node at the specified position\nexport const byPosition = nodes => (column = 0, row = 0) =>\n  spread(nodes).find(samePos({ column, row }));\n  \n// **cIDs** `::  [Node] -> Set<Number>`\n// returns a Set of a grid's columns\nexport const cIDs = nodes => spread(asSet(map(nodes)(column)));\n\n// **rIDs** `::  [Node] -> Set<Number>`\n// returns a Set of a grid's rows\nexport const rIDs = nodes => spread(asSet(map(nodes)(row)));\n\n// **byAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all nodes\nexport const byAdj = nodes => src => filter(nodes)(isNeighbor(src));\n\n// **rowAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all rows\nexport const rowAdj = nodes => src => filter(byAdj(nodes)(src))(sameRow(src));\n\n// **colAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all columns\nexport const colAdj = nodes => src => filter(byAdj(nodes)(src))(sameCol(src));\n\n// **posAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all positive diagonals\nexport const posAdj = nodes => src => filter(byAdj(nodes)(src))(samePVector(src));\n\n// **negAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all negative diagonal\nexport const negAdj = nodes => src => filter(byAdj(nodes)(src))(sameNVector(src));\n","import { Graph, } from 'graph-curry';\nimport { byAdj, colAdj, negAdj, posAdj, rowAdj, } from './filter';\n\nconst { addEdges, nodes, } = Graph;\n\n// **joinAdj** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its neighbors\nexport const joinAdj = (g, n) => addEdges(g)(n, 0)(...byAdj(nodes(g))(n));\n\n// **joinCols** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its column neighbors\nexport const joinCols = (g, n) => addEdges(g)(n, 0)(...colAdj(nodes(g))(n));\n\n// **joinRows** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its row neighbors\nexport const joinRows = (g, n) => addEdges(g)(n, 0)(...rowAdj(nodes(g))(n));\n\n// **joinPVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its positive neighbors\nexport const joinPVectors = (g, n) => addEdges(g)(n, 0)(...posAdj(nodes(g))(n));\n\n// **joinNVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its negative neighbors\nexport const joinNVectors = (g, n) => addEdges(g)(n, 0)(...negAdj(nodes(g))(n));\n","import { Graph, } from 'graph-curry';\nimport { byCol, byNVec, byPosition, byPVec, byRow, } from './filter';\nimport { joinAdj, joinCols, joinNVectors, joinPVectors, joinRows, } from './join';\nimport { node, } from './node';\n\nconst { graph, nodes, } = Graph;\n\n// **genNodes** `::  (Number, Number) -> [Node]`\n// returns an array of nodes the specified number of columns and rows\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nArr = [];\n  \n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nArr.unshift(node(c, r));\n    }\n  }\n  \n  return nArr;\n};\n\n// **grid** `::  (Number, Number) -> Map<edge>`\n// returns a Map of edges with the specified number of columns and rows\nexport const grid = (c = 0, r = 0) => graph(...genNodes(c, r));\n\n// **copy** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a copy of a grid\nexport const copy = grid => graph(...nodes(grid));\n\n// **colNodes** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified column id\nexport const colNodes = grid => (c = 0) => byCol(nodes(grid))(c);\n\n// **rowNodes** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified row id\nexport const rowNodes = grid => (r = 0) => byRow(nodes(grid))(r);\n\n// **posNodestor** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified postive diagonal\nexport const posNodes = grid => (c = 0, r = 0) => byPVec(nodes(grid))(c, r);\n\n// **negNodestor** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified negative diagonal\nexport const negNodes = grid => (c = 0, r = 0) => byNVec(nodes(grid))(c, r);\n\n// **findNode** `::  Map<edge> ->  node  -> Node`\n// returns a node at the specified position\nexport const findNode = grid => (c = 0, r = 0) => byPosition(nodes(grid))(c, r);\n\n// **joinGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their neighbors\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\n\n// **colGrid** `::  Map<edge> -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their column eighbors\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\n\n// **rowGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their row neighbors\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\n\n// **posGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their positive neighbors\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\n\n// **negGrid** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their negative neighbors\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n","import { Components, } from 'graph-curry';\nimport { colGrid, negGrid, posGrid, rowGrid, } from './grid';\n\nconst { componentSet, } = Components;\n\n// **colComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all columnn connected components\nexport const colComps = grid => componentSet(colGrid(grid));\n\n// **rowComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all row connected components\nexport const rowComps = grid => componentSet(rowGrid(grid));\n\n// **posComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all positive connected components\nexport const posComps = grid => componentSet(posGrid(grid));\n\n// **negComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all negative connected components\nexport const negComps = grid => componentSet(negGrid(grid));\n\n// **omniComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all connected components\nexport const omniComps = grid => [ colComps, negComps, posComps, rowComps, ]\n  .map(f => f(grid)).reduce((set, next) => new Set(set).add(next), new Set);\n  \n// **splitComps** `::  Map<edge>  -> Set<edge>`\n// returns a map of all connected components by direction\nexport const splitComps = g => new Map().set('row', rowComps(g))\n  .set('col', colComps(g)).set('pos', posComps(g)).set('neg', negComps(g));\n"],"names":["init","column","row","id","show","node","copy","n","setCol","c","setRow","r","atan","Math","abs","PI","colDiff","n0","n1","rowDiff","tangent","angleBetween","a","b","sameCol","sameRow","samePVector","sameNVector","samePos","c0","c1","diffPos","src","alt","cAdj","rAdj","isNeighbor","byCol","filter","nodes","byRow","byPVec","byNVec","byPosition","spread","find","cIDs","asSet","map","rIDs","byAdj","rowAdj","colAdj","posAdj","negAdj","addEdges","Graph","joinAdj","g","joinCols","joinRows","joinPVectors","joinNVectors","graph","genNodes","cols","rows","nArr","unshift","grid","colNodes","rowNodes","posNodes","negNodes","findNode","joinGrid","reduce","colGrid","rowGrid","posGrid","negGrid","componentSet","Components","colComps","rowComps","posComps","negComps","omniComps","f","set","next","Set","add","splitComps","Map"],"mappings":"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"}