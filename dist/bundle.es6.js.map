{"version":3,"file":"bundle.es6.js","sources":["../src/node.js","../src/adj.js","../src/join.js","../src/components.js","../src/grid.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\n// **column** `::  Node ->  Number`\n// returns a node's column property\nexport const column = ({ column }) => column;\n\n// **row** `::  Node ->  Number`\n// returns a node's row property\nexport const row = ({ row }) => row;\n\n// **nodeString** `::  Node ->  String`\n// returns a string representation of a node\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\n\n// **node** `::  (Number, Number) -> Node`\n// returns an object with column and row properties\nexport const node = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\n // **copy** `::  Node -> Node`\n // returns a copy of a node\nexport const copy = n => node(column(n), row(n));\n\n// **colDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes column properties\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\n\n// **rowDiff** `::  Node-> Node -> Number`\n// returns the difference of two nodes row properties\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\n\n// **tangent** `::  Node-> Node -> Number`\n// returns the column difference to row difference ratio of two nodes\nexport const tangent = n0 => n1 => rowDiff(n0)(n1) / colDiff(n0)(n1);\n\n// **angleBetween** `::  Node -> Node -> Number`\n// returns a the angle between two nodes in radians\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\n// **sameCol** `:: Node -> Node -> Boolean`\n// checks for equality between two nodes column properties\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\n\n// **sameRow** `::  Node -> Node -> Boolean`\n// checks for equality between two nodes row properties\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\n\n// **samePVector** `::  Node -> Node -> Boolean``\n// checks if two nodes lie on the same positive diagonal\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\n\n// **sameNVector** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same negative diagonal\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\n// **cAdj** `::  Node -> Node -> Boolean`\n// checks if two nodes lie on the same column\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\n\n// **rAdj** `:: Node -> Node -> Boolean\n// checks if two nodes lie on the same row\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\n// **isEquivalent** `::  Node -> Node -> Boolean`\n// checks if two nodes share position\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\n\n// **xEquivalent** `::  Node -> Node -> Boolean`\n// checks if two nodes don't share position\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\n// **isNeighbor** `::  Map<edge> ->  node  -> Map<edge>`\n// checks if two different nodes are neighbors\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\n\n // **cIDs** `::  [Node] -> Set<Number>`\n // returns a Set of a grid's columns\nexport const cIDs = nodes => new Set(nodes.map(column));\n\n // **rIDs** `::  [Node] -> Set<Number>`\n // returns a Set of a grid's rows\nexport const rIDs = nodes => new Set(nodes.map(row));\n","import { Graph, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\nconst { nodes, } = Graph;\n\n// **allAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all nodes\nexport const allAdj = g => src => nodes(g).filter(isNeighbor(src));\n\n// **rowAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all rows\nexport const rowAdj = g => src => allAdj(g)(src).filter(sameRow(src));\n\n// **colAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all columns\nexport const colAdj = g => src => allAdj(g)(src).filter(sameCol(src));\n\n// **posAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all positive diagonals\nexport const posAdj = g => src => allAdj(g)(src).filter(samePVector(src));\n\n// **negAdj** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a graph with edges connecting all negative diagonal\nexport const negAdj = g => src => allAdj(g)(src).filter(sameNVector(src));\n","import { Graph, } from 'graph-curry';\nimport { allAdj, colAdj, negAdj, posAdj, rowAdj, } from './adj';\n\nconst { addEdges, nodes, } = Graph;\n\n// **joinAdj** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its neighbors\nexport const joinAdj = (g, src) => addEdges(g)(src, 0)(...allAdj(g)(src));\n\n// **joinCols** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its column neighbors\nexport const joinCols = (g, src) => addEdges(g)(src, 0)(...colAdj(g)(src));\n\n// **joinRows** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its row neighbors\nexport const joinRows = (g, src) => addEdges(g)(src, 0)(...rowAdj(g)(src));\n\n// **joinPVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its positive neighbors\nexport const joinPVectors = (g, src) => addEdges(g)(src, 0)(...posAdj(g)(src));\n\n// **joinNVectors** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining a nodes and all its negative neighbors\nexport const joinNVectors = (g, src) => addEdges(g)(src, 0)(...negAdj(g)(src));\n\n// **joinGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their neighbors\nexport const joinGrid = grid => nodes(grid).reduce(joinAdj, grid);\n\n// **colGrid** `::  Map<edge> -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their column eighbors\nexport const colGrid = grid => nodes(grid).reduce(joinCols, grid);\n\n// **rowGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their row neighbors\nexport const rowGrid = grid => nodes(grid).reduce(joinRows, grid);\n\n// **posGrid** `::  Map<edge>  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their positive neighbors\nexport const posGrid = grid => nodes(grid).reduce(joinPVectors, grid);\n\n// **negGrid** `::  (Map<edge>, node)  -> Map<edge>`\n// returns a copy of a grid with edges joining all nodes with all their negative neighbors\nexport const negGrid = grid => nodes(grid).reduce(joinNVectors, grid);\n","import { Components, } from 'graph-curry';\nimport { colGrid, negGrid, posGrid, rowGrid, } from './join';\nconst { componentSet, } = Components;\n\n// **colComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all columnn connected components\nexport const colComps = grid => componentSet(colGrid(grid));\n\n// **rowComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all row connected components\nexport const rowComps = grid => componentSet(rowGrid(grid));\n\n// **posComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all positive connected components\nexport const posComps = grid => componentSet(posGrid(grid));\n\n// **negComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all negative connected components\nexport const negComps = grid => componentSet(negGrid(grid));\n\n// **omniComps** `::  Map<edge>  -> Set<edge>`\n// returns a set of all connected components\nexport const omniComps = grid => [ colComps, negComps, posComps, rowComps, ]\n  .map(f => f(grid)).reduce((set, next) => new Set(set).add(next), new Set);\n  \n// **splitComps** `::  Map<edge>  -> Set<edge>`\n// returns a map of all connected components by direction\nexport const splitComps = g => new Map().set('row', rowComps(g))\n  .set('col', colComps(g)).set('pos', posComps(g)).set('neg', negComps(g));\n","import { Graph, } from 'graph-curry';\nimport { column as getCol, row as getRow, isEquivalent, node, sameCol,\n  sameNVector, samePVector, sameRow, } from './node';\n\nconst { fromElements, nodes, } = Graph;\n\n// **genNodes** `::  (Number, Number) -> [Node]`\n// returns an array of nodes the specified number of columns and rows\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nArr = [];\n  \n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nArr.unshift(node(c, r));\n    }\n  }\n  \n  return nArr;\n};\n\n// **cIDs** `::  Map<edge> -> Set<Number>`\n// returns a Set of a grid's columns\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\n\n// **rIDs** `::  Map<edge> -> Set<Number>`\n// returns a Set of a grid's rows\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\n// **grid** `::  (Number, Number) -> Map<edge>`\n// returns a Map of edges with the specified number of columns and rows\nexport const grid = (c = 0, r = 0) => fromElements(...genNodes(c, r));\n\n// **copy** `::  Map<edge> ->  node  -> Map<edge>`\n// returns a copy of a grid\nexport const copy = grid => fromElements(...nodes(grid));\n\n// **nodesByColumn** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified column id\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\n// **nodesByRow** `::  Map<edge> ->  Number  -> [Node]`\n// returns an array of nodes  with the specified row id\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\n// **nodesByPVector** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified postive diagonal\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\n// **nodesByNVector** `:: Map<edge> ->  (Number, Number)  -> [Node]`\n// returns an array of nodes on the specified negative diagonal\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\n// **nodeByPosition** `::  Map<edge> ->  node  -> Node`\n// returns a node at the specified position\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n"],"names":["atan","Math","abs","PI","column","row","nodeString","node","toString","copy","n","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","cIDs","Set","nodes","map","rIDs","Graph","allAdj","g","filter","rowAdj","colAdj","posAdj","negAdj","addEdges","joinAdj","joinCols","joinRows","joinPVectors","joinNVectors","joinGrid","grid","reduce","colGrid","rowGrid","posGrid","negGrid","componentSet","Components","colComps","rowComps","posComps","negComps","omniComps","f","set","next","add","splitComps","Map","fromElements","genNodes","cols","rows","nArr","c","r","unshift","getCol","getRow","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find"],"mappings":"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"}