{"version":3,"file":"bundle.es6.js","sources":["../src/node.js","../src/connections.js","../src/traversals.js","../src/grid.js"],"sourcesContent":["const { atan, abs, PI } = Math;\n\nexport const column = ({ column }) => column;\nexport const row = ({ row }) => row;\nexport const nodeString = ({ column, row }) => `{ node::${column}_${row} }`;\nexport const spawn = (column = null, row = null) =>\n ({ column, row, toString: () => nodeString({ column, row }) });\n\nexport const colDiff = ({ column: c0 }) => ({ column: c1 }) => (c0 - c1);\nexport const rowDiff = ({ row: r0 }) => ({ row: r1 }) => (r0 - r1);\nexport const tangent = n0 => n1 => (rowDiff(n0)(n1)) / (colDiff(n0)(n1));\nexport const angleBetween = n0 => n1 => ((atan(tangent(n0)(n1)) % PI) + PI) % PI;\n\nexport const sameCol = n0 => n1 => abs(colDiff(n0)(n1)) === 0;\nexport const sameRow = n0 => n1 => abs(rowDiff(n0)(n1)) === 0;\nexport const samePVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.25;\nexport const sameNVector = n0 => n1 => angleBetween(n0)(n1) === PI * 0.75;\n\nexport const cAdj = n0 => n1 => abs(colDiff(n0)(n1)) < 2;\nexport const rAdj = n0 => n1 => abs(rowDiff(n0)(n1)) < 2;\n\nexport const isEquivalent = c0 => c1 => sameCol(c0)(c1) && sameRow(c0)(c1);\nexport const xEquivalent = src => alt => !isEquivalent(src)(alt);\n\nexport const isNeighbor = n0 => n1 =>\n xEquivalent(n0)(n1) && cAdj(n0)(n1) && rAdj(n0)(n1);\nexport default spawn;\n","import { addEdges, fromElements, nodes, } from 'graph-curry';\nimport { isNeighbor, sameCol, sameNVector, samePVector, sameRow, } from './node';\n\nexport const adjNodes = grid => src => nodes(grid).filter(isNeighbor(src));\n\nexport const rowAdj = grid => src => adjNodes(grid)(src).filter(sameRow(src));\nexport const colAdj = grid => src => adjNodes(grid)(src).filter(sameCol(src));\nexport const posAdj = grid => src => adjNodes(grid)(src).filter(samePVector(src));\nexport const negAdj = grid => src => adjNodes(grid)(src).filter(sameNVector(src));\nexport const allAdj = grid => src => adjNodes(grid)(src).filter(isNeighbor(src));\n\nexport const joinAdjBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...adjNodes(grid)(src));\n\nexport const joinColsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...colAdj(grid)(src));\n\nexport const joinRowsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...rowAdj(grid)(src));\n\nexport const joinPVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...posAdj(grid)(src));\n\nexport const joinNVectorsBin = (grid = new Map, src) =>\n  addEdges(grid)(src, 0)(...negAdj(grid)(src));\n\nexport const joinAdj = grid => nodes(grid).reduce(joinAdjBin, grid);\nexport const joinCols = grid => nodes(grid).reduce(joinColsBin, grid);\nexport const joinRows = grid => nodes(grid).reduce(joinRowsBin, grid);\nexport const joinPVectors = grid => nodes(grid).reduce(joinPVectorsBin, grid);\nexport const joinNVectors = grid => nodes(grid).reduce(joinNVectorsBin, grid);\n","import { componentSet, fromElements, nodes, } from 'graph-curry';\nimport { joinAdj, joinCols, joinNVectors, joinPVectors, joinRows, } from 'src/connections';\n\nexport const omniGraph = grid => joinAdj(fromElements(...nodes(grid)));\nexport const colGraph = grid => joinCols(fromElements(...nodes(grid)));\nexport const rowGraph = grid => joinRows(fromElements(...nodes(grid)));\nexport const posGraph = grid => joinPVectors(fromElements(...nodes(grid)));\nexport const negGraph = grid => joinNVectors(fromElements(...nodes(grid)));\n\nexport const colComponents = grid => componentSet(colGraph(grid));\nexport const rowComponents = grid => componentSet(rowGraph(grid));\nexport const posComponents = grid => componentSet(posGraph(grid));\nexport const negComponents = grid => componentSet(negGraph(grid));\n","import { fromElements, nodes, } from 'graph-curry';\nimport node, { column as getCol, row as getRow, isEquivalent, sameCol,\nsameNVector, samePVector, sameRow, } from './node';\n\nexport { nodes, neighbors, } from 'graph-curry';\nexport const genNodes = (cols = 0, rows = 0) => {\n  const nodes = [];\n\n  for (let c = cols - 1; c >= 0; c--) {\n    for (let r = rows - 1; r >= 0; r--) {\n      nodes.unshift(node(c, r));\n    }\n  }\n\n  return nodes;\n};\n\nexport const cIDs = grid => new Set(nodes(grid).map(getCol));\nexport const rIDs = grid => new Set(nodes(grid).map(getRow));\n\nexport const initNodes = (c = 0, r = 0) => fromElements(...genNodes(c, r));\nexport const fromGrid = grid => fromElements(...nodes(grid));\n\nexport const nodesByColumn = grid => (column = 0) =>\n  nodes(grid).filter(sameCol({ column }));\n\nexport const nodesByRow = grid => (row = 0) =>\n  nodes(grid).filter(sameRow({ row }));\n\nexport const nodesByPVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(samePVector({ column, row }));\n\nexport const nodesByNVector = grid => (column = 0, row = 0) =>\n  nodes(grid).filter(sameNVector({ column, row }));\n\nexport const nodeByPosition = grid => (column = 0, row = 0) =>\n  nodes(grid).find(isEquivalent({ column, row }));\n\nexport default initNodes;\n"],"names":["atan","Math","abs","PI","column","row","nodeString","spawn","toString","colDiff","c0","c1","rowDiff","r0","r1","tangent","n0","n1","angleBetween","sameCol","sameRow","samePVector","sameNVector","cAdj","rAdj","isEquivalent","xEquivalent","src","alt","isNeighbor","adjNodes","nodes","grid","filter","rowAdj","colAdj","posAdj","negAdj","allAdj","joinAdjBin","Map","addEdges","joinColsBin","joinRowsBin","joinPVectorsBin","joinNVectorsBin","joinAdj","reduce","joinCols","joinRows","joinPVectors","joinNVectors","omniGraph","fromElements","colGraph","rowGraph","posGraph","negGraph","colComponents","componentSet","rowComponents","posComponents","negComponents","genNodes","cols","rows","c","r","unshift","node","cIDs","Set","map","getCol","rIDs","getRow","initNodes","fromGrid","nodesByColumn","nodesByRow","nodesByPVector","nodesByNVector","nodeByPosition","find"],"mappings":"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"}